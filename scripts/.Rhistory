st_as_sf()
return(buffered)
}
a <- pts %>%
split(., 1:nrow(.))%>%
purrr::map(pts_cell) %>%
bind_rows() %>%
st_as_sf() %>%
mutate(rownum = 1:nrow(.), .before = x)
out <- st_intersects(a, pts)
ggplot(a) +
geom_sf()
View(out)
out_tests <- bind_rows(out)
out_tests <- out %>% purrr::map(length(.x) == 1)
out_tests <- out %>% purrr::map(length(x) == 1)
out_tests <- out %>% purrr::map(~length(x) == 1)
out_tests <- out %>% purrr::map(~Filter(length(x) == 1))
out_tests <- out %>% purrr::map(~Filter(length(.x) == 1))
out_tests <- unlist(out)
out_tests
View(out)
lengt(out)
lapply(out, length)
Filter(lapply(out, length), ==1)
lapply(out, length)
aLL <- lapply(out, length)
View(aLL)
aLL <- rbind(lapply(out, length))
View(aLL)
aLL <- rbind(lapply(out, length))
aLL <- bind_rows(lapply(out, length))
aLL <- lapply(out, length)
View(aLL)
View(aLL)
names(aLL)
names(aLL) <- 1:length(aLL)
aLL
bind_rows(aLL)
aLL <- bind_rows(aLL)
View(aLL)
aLL <- bind_rows(aLL) %>% t()
View(aLL)
aLL <- lapply(out, length)
names(aLL) <- 1:length(aLL)
aLL <- bind_rows(aLL) %>% t()
View(aLL)
which(aLL > 0)
aLL > 0
aLL>0
which(aLL>0)
out_tests>5
print(out_tests)
print(out_tests)
out_tests>5
out_tests>5
aLL>5
aLL=>1
aLL>=1
aLL>=3
View(aLL)
aLL>=1
aLL <- bind_rows(aLL) %>% t() %>% as.vector()
aLL <- lapply(out, length)
names(aLL) <- 1:length(aLL)
aLL <- bind_rows(aLL) %>% t() %>% as.vector()
aLL>=1
aLL
aLL>=1
aLL==1
aLL>=2
which(aLL<=2)
aLL <- lapply(out, length)
View(aLL)
unlist(aLL)
aLL <- lapply(out, length)
which(aLL<=2) # this type of code will produce all singletons.
aLL[aLL<=2] # this type of code will produce all singletons.
singletons <- aLL[aLL<=2] # this type of code will produce all singletons.
View(singletons)
singletons <- which[aLL<=2] # this type of code will produce all singletons.
which(aLL<=2) # this type of code will produce all singletons.
singletons <- which(aLL<=2) # this type of code will produce all singletons.
multiples <- which(aLL=>2)
multiples <- which(aLL>=2)
View(astragalus)
multiples <- which(aLL>=2)
mult <- out[multiples]
View(mult)
mult <- unlist(mult)
singletons %in% mult
singletons[singletons %in% mult]
in <- singletons[singletons %in% mult]
in_window <- singletons[singletons %in% mult]
in_window
in_window <- singletons[!singletons %in% mult]
in_window
multiple_slots_holding_singles <- singletons[singletons %in% mult]
multiple_slots_holding_singles
View(out)
aLL <- lapply(out, length)
singletons <- which(aLL<2) # this type of code will produce all singletons.
multiples <- which(aLL>=2) # we can use the inverse to find all multiples
mult <- out[multiples] # we can see if any of the MULTIPLES contain the
# singleton values in them
mult <- unlist(mult)
singletons <- singletons[!singletons %in% mult]
multiple_slots_holding_singles <- singletons[singletons %in% mult]
multiple_slots_holding_singles
singletons <- singletons[!singletons %in% mult]
aLL <- lapply(out, length)
singletons <- which(aLL<2) # identify ALL lone windows
multiples <- which(aLL>=2) #
singletons
multiples <- out(aLL>=2) # we can use the inverse to find all multiples
multiples <- out[aLL>=2] # we can use the inverse to find all multiples
View(multiples)
out <- st_intersects(a, pts)
# working on getting function together...
aLL <- lapply(out, length)
singletons <- out[aLL<2] # identify ALL lone windows
multiples <- out[aLL>=2] # w
View(multiples)
names(out) <- 1:nrow(out)
View(out)
names(out) <- paste0('row', 1:nrow(out))
aLL <- lapply(out, length)
singletons <- out[aLL<2] # identify ALL lone windows
multiples <- out[aLL>=2] # we
View(out)
View(singletons)
View(multiples)
# IDENTIFY ALL RECIPROCAL PAIRS
couplets <- out[aLL==2]
View(couplets)
View(out)
View(couplets)
couplets <- bind_rows(couplets)
View(couplets)
View(couplets)
# IDENTIFY ALL RECIPROCAL PAIRS
couplets <- out[aLL==2]
couplets == couplets
vec1 <- c("A", "B", "C")
vec2 <- c("A", "B", "D")
vec1 == vec2
identical(vec1, vec2)
lapply(couplets, identical)
mapply(couplets, couplets, identical)
sapply(list(couplets), FUN = identical, couplets[1])
sapply(couplets, FUN = identical, couplets[1])
sapply(couplets, FUN = identical, couplets[2])
couplets
sapply(couplets, FUN = identical, couplets[2])
sapply(couplets, FUN = identical, couplets)
all(sapply(couplets, FUN = identical, couplets))
View(couplets)
sapply(unlist(couplets), FUN = identical, unlist(couplets))
sapply(couplets, FUN = identical, couplets)
couplets1 unlist(couplets)
couplets1 <-  unlist(couplets)
print(couplets1)
sapply(couplets, FUN = var, couplets)
sapply(couplets, FUN = identical, couplets)
outer(couplets, couplets, Vectorize(all.equal))
outer(couplets, couplets, Vectorize(equal))
outer(couplets, couplets, Vectorize(a..equal))
outer(couplets, couplets, Vectorize(all.equal))
outer(couplets, couplets, Vectorize(all.equal)) == T
equivalent <- outer(couplets, couplets, Vectorize(all.equal)) == T
upper.tri(equivalent, 0)
equivalent
?upper.tri
equivalent[lower.tri(equivalent)] <- NA
equivalent
rowSums(equivalent)
equivalent
equivalent <- outer(couplets, couplets, Vectorize(all.equal)) == T
equivalent
rowSums(equivalent)
equivalent
rowSums(equivalent)
equi <- rowSums(equivalent)
couplets[equi ==1]
equivalent
equi <- rowSums(equivalent)
couplets[equi == 1]
couplets[equi == 2]
which(outer(couplets, couplets, Vectorize(all.equal)))
true_couplets <- couplets[equi == 2]
outer(couplets, couplets, Vectorize(all.equal))
outer(true_couplets, true_couplets, Vectorize(all.equal))
outer(true_couplets, true_couplets, Vectorize(all.equal)) == T
outer(true_couplets, true_couplets, Vectorize(all.equal)) == F
outer(true_couplets, true_couplets, Vectorize(all.equal)) == T
outer1 <- outer(true_couplets, true_couplets, Vectorize(all.equal)) == T
upper.tri(outer1) <- NA
outer1[upper.tri(outer1, diag = F)] <- NA
outer1
outer1 <- outer(true_couplets, true_couplets, Vectorize(all.equal)) == T
outer1[upper.tri(outer1, diag = T)] <- NA
outer1
outer1[outer1 == TRUE]
outer1 <- outer(true_couplets, true_couplets, Vectorize(all.equal)) == T
outer1[upper.tri(outer1, diag = T)] <- NA
outer1
View(outer1)
filter(data, == TRUE)
filter(outer1 == TRUE)
subset(outer1, outer1[,] ==TRUE)
outer1
rowSum(outer1)
rowSums(outer1)
which(outer1, arr=TRUE)
which(outer1)
which(outer1, arr=TRUE)
outer1
recip_pairs <- outer(true_couplets, true_couplets, Vectorize(all.equal)) == T
recip_pairs[upper.tri(recip_pairs, diag = T)] <- NA
which(recip_pairs, arr=TRUE)
which(!recip_pairs, arr=TRUE)
which(!recip_pairs, arr=F)
which(!recip_pairs, arr=TRUE)
kept_pair <- which(recip_pairs, arr=TRUE) # RECORDS TO KEEP
View(kept_pair)
View(recip_pairs)
#set_here(path = "/hdd/revisionary_taxonomy")
library(here)
library(tidyverse)
library(sf)
library(tigris)
library(ggspatial)
astragalus <- st_read(paste0(here(), '/data/processed/', 'astragalus.shp'), quiet = T)
eriogonum <- st_read(paste0(here(), '/data/processed/', 'eriogonum.shp'), quiet = T)
townsendia <- st_read(paste0(here(), '/data/processed/', 'townsendia.shp'), quiet = T)
pts <- bind_rows(astragalus, eriogonum, townsendia) %>%
st_transform(4269)
bb <- pts %>%
st_transform(32613) %>%
st_buffer(50000) %>%
st_transform(4269) %>%
st_convex_hull() %>%
st_bbox()
bb1 <- pts %>%
st_transform(32613) %>%
st_buffer(7500) %>%
st_transform(4269) %>%
st_convex_hull() %>%
st_bbox()
rm(astragalus, eriogonum, townsendia)
pts_cell <- function(x, utmzone, buf_dist, out_crs) {
buffered <- x %>%
st_as_sf() %>%
st_transform(32613) %>%
st_buffer(12000) %>%
st_transform(4269) %>%
st_bbox() %>%
st_as_sfc() %>%
st_as_sf()
return(buffered)
}
a <- pts %>%
split(., 1:nrow(.))%>%
purrr::map(pts_cell) %>%
bind_rows() %>%
st_as_sf() %>%
mutate(rownum = 1:nrow(.), .before = x)
a <- pts %>%
split(., 1:nrow(.))%>%
purrr::map(pts_cell) %>%
bind_rows() %>%
st_as_sf() %>%
mutate(rownum = 1:nrow(.), .before = x)
ggplot(a) +
geom_sf()
ggplot(a) +
geom_sf()
out <- st_intersects(a, pts)
View(out)
# step 1 ######################################
# IDENTIFY ALL SINGLETON WINDOWS
names(out) <- paste0('row', 1:nrow(out))
aLL <- lapply(out, length)
singletons <- out[aLL<2] # identify ALL lone windows
multiples <- out[aLL>=2] # we can use the inverse to find all multiples
##############################################
# step 2 #######################################
# IDENTIFY ALL RECIPROCAL PAIRS
couplets <- out[aLL==2]
# determine which are true pairs
equivalent <- outer(couplets, couplets, Vectorize(all.equal)) == T
equi <- rowSums(equivalent)
true_couplets <- couplets[equi == 2]
# identify and subset one of each pair
recip_pairs <- outer(true_couplets, true_couplets, Vectorize(all.equal)) == T
recip_pairs[upper.tri(recip_pairs, diag = T)] <- NA
kept_pair <- which(recip_pairs, arr=TRUE) # RECORDS TO KEEP
View(kept_pair)
recip_pairs
pairs_remove <- recip_pairs[kept_pair$row,]
View(kept_pair)
View(kept_pair)
str(kept_pair)
# step 3 #######################################
# Identify windows which cover most of the sites
kept_pair[,1]
pairs_remove <- recip_pairs[kept_pair[,1],]
pairs_remove
# step 3 #######################################
# Identify windows which cover most of the sites
kept_pair
pairs_remove <- recip_pairs[!kept_pair[,1],]
pairs_remove
# step 3 #######################################
# Identify windows which cover most of the sites
kept_pair
pairs_remove <- recip_pairs[!kept_pair[,1],]
View(pairs_remove)
pairs_remove <- recip_pairs[kept_pair[,1],]
View(pairs_remove)
View(kept_pair)
pairs_remove <- recip_pairs[kept_pair[,2],]
pairs_remove
# step 3 #######################################
# Identify windows which cover most of the sites
kept_pair
View(multiples)
View(pairs_remove)
out[grep(rownames(kept_pair), names(out))]
out[!grep(rownames(kept_pair), names(out))]
out[grep(c(rownames(kept_pair)), names(out))]
str_detect(names(out), vrownames(kept_pair))
str_detect(names(out), rownames(kept_pair))
str_detect(!names(out), rownames(kept_pair))
str_detect(names(out), rownames(kept_pair), negate = T)
out[str_detect(names(out), rownames(kept_pair), negate = T)]
groups <- out[str_detect(names(out), rownames(kept_pair), negate = T)]
View(groups)
kept_pair
# Step 3 subset original dataset with removed points,
rownames(kept_pair)
# Step 3 subset original dataset with removed points,
cat(rownames(kept_pair))
# Step 3 subset original dataset with removed points,
cat(rownames(kept_pair), '|')
# Step 3 subset original dataset with removed points,
paste0(rownames(kept_pair), '|')
# Step 3 subset original dataset with removed points,
paste0(rownames(kept_pair), '|')
# Step 3 subset original dataset with removed points,
paste(rownames(kept_pair), '|')
# Step 3 subset original dataset with removed points,
cat(rownames(kept_pair), '|')
# Step 3 subset original dataset with removed points,
unite(rownames(kept_pair), '|')
paste(rownames(kept_pair), collapse = "")
paste(rownames(kept_pair), collapse = "|")
groups <- out[str_detect(paste(rownames(kept_pair), collapse = "|")
, rownames(kept_pair), negate = T)]
# Step 3 subset original dataset with removed points,
kept <- paste(rownames(kept_pair), collapse = "|")
groups <- out[str_detect(names(out), kept, negate = T)]
View(groups)
groups <- multiples[str_detect(names(multiples), kept, negate = T)]
remove <- paste(rownames(pairs_remove), collapse = "|")
groups <- multiples[str_detect(names(multiples), groups, negate = T)]
groups <- groups[str_detect(names(groups), remove, negate = T)]
View(groups)
outer(groups, groups, Vectorize(%in%)) == T
outer(groups, groups, Vectorize(setequal)) == T
outer(groups, groups, Vectorize(contains)) == T
setequal
outer(groups, groups, Vectorize(setequal)) == T
big <- outer(groups, groups, Vectorize(setequal)) == T
View(big)
big[upper.tri(big, diag = T)] <- NA
big
big <- outer(groups, groups, Vectorize(intersect))
big
outer(groups, groups, Vectorize(intersect))
outer(groups, groups, Vectorize(intersect)) == T
big <- outer(groups, groups, Vectorize(setequal)) == T
big[upper.tri(big, diag = T)] <- NA
big
kept_pair <- which(recip_pairs, arr=TRUE)
kept_pair <- which(big, arr=TRUE)
View(kept_pair)
View(big)
kept_pair <- which(big, arr=F)
print(kept_pair)
all(is.element(second, first))
all(is.element(groups, groups))
print(kept_pair))
print(kept_pair)
print(kept_pair)
View(big)
View(pairs_remove)
kept_pair <- which(big, arr=T)
print(kept_pair)
View(big)
View(big)
shared_groups <- which(big, arr=T)
shared_groups %>% rowid_to_column(position)
tibble(shared_groups) %>% rowid_to_column(position)
tibble(shared_groups) %>% rowid_to_column()
shared_groups <- which(big, arr=T)
tibble(shared_groups) %>% rowid_to_column()
alpha <- tibble(shared_groups) %>% rowid_to_column()
View(alpha)
shared_groups <- which(big, arr=T)
alpha <- data_frame(shared_groups) %>% rowid_to_column()
View(alpha)
alpha <- data.frame(shared_groups) %>% rowid_to_column()
View(alpha)
alpha <- data.frame(shared_groups)
shared_groups <- which(big, arr=T)
alpha <- data.frame(shared_groups)
alpha <- data.frame(shared_groups) %>% rowid_to_column()
shared_groups <- which(big, arr=T)
alpha <- data.frame(shared_groups) %>% rowid_to_column()
shared_groups <- which(big, arr=T)
alpha <- data.frame(shared_groups) %>% rowid_to_column()
shared_groups <- which(big, arr=T)
alpha <- as.data.frame(shared_groups) %>% rowid_to_column()
shared_groups <- which(big, arr=T)
alpha <- data.frame(shared_groups)
alpha <- cbind(rownames(alpha), shared_groups)
rownames(alpha) <- NULL
colnames(alpha) <- c('target','row','col')
View(alpha)
View(alpha)
alpha <- alpha %>% mutate(target == str_remove(target, '[.]*'))
?str_remove
View(alpha)
alpha <- data.frame(alpha) %>% mutate(target == str_remove(target, '[.]*'))
View(alpha)
alpha <- data.frame(alpha) %>%
mutate(target == str_remove(target, '[.]'))
View(alpha)
shared_groups <- which(big, arr=T)
alpha <- data.frame(shared_groups)
alpha <- cbind(rownames(alpha), shared_groups)
rownames(alpha) <- NULL
colnames(alpha) <- c('target','row','col')
alpha <- data.frame(alpha) %>%
mutate(target == str_remove(target, '[.]'))
View(alpha)
alpha <- alpha %>%
data.frame() %>%
mutate(target == str_remove(target, '[.]'))
View(alpha)
alpha <- alpha %>%
data.frame() %>%
mutate(target = str_remove(target, '[.]'))
shared_groups <- which(big, arr=T)
alpha <- data.frame(shared_groups)
alpha <- cbind(rownames(alpha), shared_groups)
rownames(alpha) <- NULL
colnames(alpha) <- c('target','row','col')
alpha <- alpha %>%
data.frame() %>%
mutate(target = str_remove(target, '[.]'))
View(alpha)
shared_groups <- which(big, arr=T)
alpha <- data.frame(shared_groups)
alpha <- cbind(rownames(alpha), shared_groups)
rownames(alpha) <- NULL
colnames(alpha) <- c('target','row','col')
alpha <- alpha %>%
data.frame() %>%
mutate(target = str_remove(target, '[.]*'))
View(alpha)
shared_groups <- which(big, arr=T)
alpha <- data.frame(shared_groups)
alpha <- cbind(rownames(alpha), shared_groups)
rownames(alpha) <- NULL
colnames(alpha) <- c('target','row','col')
alpha <- alpha %>%
data.frame() %>%
mutate(target = str_remove(target, '[.]*$'))
shared_groups <- which(big, arr=T)
alpha <- data.frame(shared_groups)
alpha <- cbind(rownames(alpha), shared_groups)
rownames(alpha) <- NULL
colnames(alpha) <- c('target','row','col')
alpha <- alpha %>%
data.frame() %>%
mutate(target = str_remove(target, '[.].*'))
View(alpha)
alpha <- alpha %>%
data.frame() %>%
mutate(target = str_remove(target, '[.].*')) %>%
arrange(target)
alpha <- alpha %>%
data.frame() %>%
mutate(target = str_remove(target, '[.].*')) %>%
sort(target)
alpha <- alpha %>%
data.frame() %>%
mutate(target = str_remove(target, '[.].*')) %>%
arrange(target)
View(alpha)
alpha <- alpha %>%
data.frame() %>%
mutate(target = str_remove(target, '[.].*')) %>%
arrange(
str_remove(target, 'row') %>% as.numeric()
)
View(alpha)
shared_groups
big
View(big)
